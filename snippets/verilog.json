{
	// Place your snippets for verilog here. Each snippet is defined under a snippet name and has a prefix, body and 
	// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the 
	// same ids are connected.
	// Example:
	// "Print to console": {
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
    // }
    

"Module Shell": {
    "prefix": "module",
    "body": [
        "//////////////////////////////////////////////////////////////////////////////////",
        "// Engineer:        Philip Wolfe",
        "// ",
        "// Create Date:     ${2:MM}/${3:DD}/2018",
        "// Module Name:     ${TM_FILENAME_BASE}",
        "// Target Devices:  ",
        "// Description:     ${5}",
        "// Dependencies:    ",
        "//",
        "// Revision History: ",
        "//     Revision 0.00:   $2/$3/18, Philip Wolfe - created file",
        "//",
        "// Additional Comments: ",
        "//",
        "//////////////////////////////////////////////////////////////////////////////////",
        "module ${TM_FILENAME_BASE} #(",
        "    parameter w = 12,",
        "    parameter h = 7",
        ") (",
        "    input  wire         example_input1,",
        "    input  wire [7:0]   example_input2,",
        "    output wire         example_output1,",
        "    output wire [15:0]  example_output2",
        ");",
        "parameter example_parameter1 = some_default_val;",
        "",
        "// ======== internal connections ========",
        "wire example_internal_connection1;",
        "wire [15:0] example_internal_connection2;",
        "reg [2:0] example_internal_reg;",
        "",
        "// ======== instantiations ========",
        "",
        "// ======== module behavior ========",
        "",
        "endmodule",
        ""
    ],
    "description": "Creates module shell." 
},

"Testbench Shell": {
    "prefix": "testbench",
    "body": [
        "//////////////////////////////////////////////////////////////////////////////////",
        "// Engineer:        Philip Wolfe",
        "// ",
        "// Create Date:     ${2:MM}/${3:DD}/2018",
        "// Module Name:     ${TM_FILENAME_BASE}",
        "// Target Devices:  ${4}",
        "// Description:     testbench for ${5:module_name}",
        "// Dependencies:    ",
        "//",
        "// Revision History: ",
        "//     Revision 0.00:   $2/$3/18, Philip Wolfe - created file",
        "//",
        "// Additional Comments: ",
        "//",
        "//////////////////////////////////////////////////////////////////////////////////",
        "module ${TM_FILENAME_BASE};",
        "",
        "//// DUT signals ////",
        "    // parameters",
        "",
        "    // inputs",
        "    reg clk = 0;",
        "",
        "    // outputs",
        "",
        "//// DUT ////",
        "    $5 #(",
        "        .w(w),",
        "        .threshold(threshold)",
        "    ) DUT (",
        "        // inputs",
        "        .norm(norm),",
        "        .valid_in(valid_in),",
        "        // outputs",
        "        .pixel_out(pixel_out),",
        "        .valid_out(valid_out)",
        "    );",
        "",
        "//// begin test ////",
        "    always #5 clk <= ~clk;",
        "    initial begin",
        "        norm <= 200;",
        "        valid_in <= 1'b1;",
        "        #5; ",
        "        norm <= 300;",
        "        #5;",
        "        $$stop;",
        "    end",
        "",
        "endmodule",
        ""
    ],
    "description": "creates testbench shell."
},


"Instantiation": {
    "prefix": "inst",
    "body": [   
        "${1:ModuleName} #() ${2:instance_name} (",
        "    // inputs",
        "    .example_input1(internal_connection1),",
        "    // outputs",
        "    .example_output1(internal_connection2),",
        ");",
        ""
    ],
    "description": "Instantiates a module."
},

"State Machine": {
    "prefix": "state_machine",
    "body": [   
        "// State Machine",
        "localparam ST_IDLE=0, ST_RUN=1, ST_STOP=2;",
        "reg [1:0] PS = ST_IDLE;",
        "reg [1:0] NS;",
        "always @(posedge clk) begin",
        "    PS <= NS;",
        "end",
        "// state transition logic & output assignment",
        "always @(PS, input_signals) begin",
        "    case (PS)",
        "        ST_IDLE: begin",
        "        end",
        "        ST_RUN: begin",
        "        end",
        "        default: begin",
        "        end",
        "    endcase",
        "end",
        ""
    ],
    "description": "state machine shell"
}



}